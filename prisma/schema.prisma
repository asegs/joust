// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id Int @id @default(autoincrement())
  name String
  startDate DateTime
  endDate DateTime
  location String
  maxPlayers Int
  description String
  entries Entry[]
  admins Admin[]
  games Game[]
  minRating Int?
  maxRating Int?
  requireLinkedAccounts Boolean @default(false)
}

model Player {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  uscfProfile String?
  fideProfile String?
  chessComProfile String?
  lichessProfile String?
  neutralRating Int?
  entries Entry[]
  whiteGames Game[] @relation("WhiteGames")
  blackGames Game[] @relation("BlackGames")
  adminedTournaments Admin[]
}

model Entry {
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  player Player @relation(fields: [playerId], references: [id])
  playerId Int
  type String @default("request")
  @@id([tournamentId, playerId], name: "entryId")
}

model Game {
  id Int @id @default(autoincrement())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  round Int
  white Player @relation("WhiteGames", fields: [whiteId], references: [id])
  whiteId Int
  black Player @relation("BlackGames",fields: [blackId], references: [id])
  blackId Int
  result Int
  pgn String @db.LongText
}

model Admin {
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  player Player @relation(fields: [playerId], references: [id])
  playerId Int
  type String @default("owner")
  @@id([tournamentId, playerId], name: "adminId")
}
